main.py was developed on my machine. It runs on the CPU, so no special
hardware is needed. The python3 interpreter was designed to accept main.py,
so do not use python 2. The specific python3 interpreter is 3.6.8. The required
libraries can all be installed via pip3. Here is the list:
          - cv2
          - matplotlib
          - numpy
          - tkinter
          - argparse
          - PIL

This program features three representative test cases and a GUI that let's
the user interact with the histogram equalization function. It uses numpy to make things
easier when manipulating images and is simple in design. It uses disk, so make
sure the images directory is writable. 
One problem is that the GUI is not refreshable, so the program must be 
restarted for the new binary file to be seen in the window. Also, there
is output in the console log for when the GUI reads the original image
or binary image. It also lets you know where the new histogram equalized image
was written. 
Another problem is that the algorithm is not fast when computing histogram
equalization. Since an image has many pixels, and each pixel has to be visisted,
the running time can grow significantly if the histogram range is wide. It is
advised to watch the console log when a wide range is specified. An 
EQUALIZER log will show up and let you know which matrix the equalizer is 
currently computing. Since images have three matricies, the last dimension
logged will be 2.